package phaser.math;

@:native("Phaser.Math")
extern class Math {
	function PI2 ():Void;
	function fuzzyEqual (a:Float, b:Float, epsilon:Float):Bool;
	function fuzzyLessThan (a:Float, b:Float, epsilon:Float):Bool;
	function fuzzyGreaterThan (a:Float, b:Float, epsilon:Float):Bool;
	function average ():Float;
	function snapTo (input:Float, gap:Float, ?start:Float):Float;
	function snapToFloor (input:Float, gap:Float, ?start:Float):Float;
	function snapToCeil (input:Float, gap:Float, ?start:Float):Float;
	function snapToInArray (input:Float, arr:Dynamic, sort:Bool):Float;
	function roundTo (value:Float, place:Float, base:Float):Float;
	function interpolateFloat (a:Float, b:Float, weight:Float):Float;
	function angleBetween (x1:Float, y1:Float, x2:Float, y2:Float):Float;
	function angleBetweenPoints (point1:phaser.geom.Point, point2:phaser.geom.Point):Float;
	function reverseAngle (angleRad:Float):Float;
	function normalizeAngle (angleRad:Float):Float;
	function normalizeLatitude (lat:Float):Float;
	function normalizeLongitude (lng:Float):Float;
	function nearestAngleBetween (a1:Float, a2:Float, radians:Bool):Float;
	function interpolateAngles (a1:Float, a2:Float, weight:Float, radians:Bool, ease:Dynamic):Float;
	function chanceRoll (chance:Float):Bool;
	function numberArray (min:Float, max:Float):Dynamic;
	function maxAdd (value:Float, amount:Float, max:Float):Float;
	function minSub (value:Float, amount:Float, min:Float):Float;
	function wrap (value:Float, min:Float, max:Float):Float;
	function wrapValue (value:Float, amount:Float, max:Float):Float;
	function randomSign ():Float;
	function isOdd (n:Float):Bool;
	function isEven (n:Float):Bool;
	function min ():Float;
	function max ():Float;
	function minProperty ():Float;
	function maxProperty ():Float;
	function wrapAngle (angle:Float, radians:Bool):Float;
	function angleLimit (angle:Float, min:Float, max:Float):Float;
	function linearInterpolation (v:Float, k:Float):Float;
	function bezierInterpolation (v:Float, k:Float):Float;
	function catmullRomInterpolation (v:Float, k:Float):Float;
	function Linear (p0:Float, p1:Float, t:Float):Float;
	function catmullRom (p0:Float, p1:Float, p2:Float, p3:Float, t:Float):Float;
	function getRandom (objects:Dynamic, startIndex:Float, length:Float):Dynamic;
	function removeRandom (objects:Dynamic, startIndex:Float, length:Float):Dynamic;
	function floor (Value:Float):Float;
	function ceil (value:Float):Float;
	function sinCosGenerator (length:Float, sinAmplitude:Float, cosAmplitude:Float, frequency:Float):Array<Dynamic>;
	function shift (stack:Dynamic):Dynamic;
	function shuffleArray (array:Dynamic):Dynamic;
	function distance (x1:Float, y1:Float, x2:Float, y2:Float):Float;
	function distancePow (x1:Float, y1:Float, x2:Float, y2:Float, ?pow:Float = 2):Float;
	function distanceRounded (x1:Float, y1:Float, x2:Float, y2:Float):Float;
	function clamp (x:Float, a:Float, b:Float):Float;
	function clampBottom (x:Float, a:Float):Float;
	function within (a:Float, b:Float, tolerance:Float):Bool;
	function mapLinear (x:Float, a1:Float, a2:Float, b1:Float, b2:Float):Float;
	function smoothstep (x:Float, min:Float, max:Float):Float;
	function smootherstep (x:Float, min:Float, max:Float):Float;
	function sign (x:Float):Float;
	function degToRad ():Dynamic;
	function radToDeg ():Dynamic;
}
